{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","apiEndpoint","type","url","name","q","withCredentials","headers","basicAuth","length","datasourceRequest","method","then","response","status","message","title","options","targets","_","filter","target","hide","allTargetResults","data","testPromises","map","metric","recursiveRequest","Promise","all","values","reqUrl","range","from","toISOString","to","doRequest","nextlink","nextLink","datapoints","convertData","push","transformToTable","columns","text","v","entry","hasOwnProperty","metrics","parent","recursiveMetricReq","page","res","total","convertMetrics","series","streams","d","i","value","limit","console","error","Array","isArray","log","Math","min","table","columnMap","meta","refId","rows","row","j"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.apiEndpoint = \"data/\";\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.headers = {'Content-Type': 'application/json'};\r\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\r\n      this.headers['Authorization'] = instanceSettings.basicAuth;\r\n    }\r\n  }\r\n\r\n  // Required\r\n  // Used for testing datasource in datasource configuration page\r\n  testDatasource() {\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url + '/health',\r\n      method: 'GET'\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\r\n      }\r\n    });\r\n  }\r\n\r\n  // Query data from Data API\r\n  // Called once per panel (graph)\r\n  async query(options) {\r\n    options.targets = _.filter(options.targets, target => target.hide !== true);\r\n    let allTargetResults = { data: [] };\r\n\r\n    let testPromises = options.targets.map(async target => {\r\n      if(!('metric' in target) || target.metric == 'select time series') {\r\n        return {'target': '', 'datapoints' : []};\r\n      }\r\n      return await this.recursiveRequest(\"\", target, options, []);\r\n    });\r\n    return Promise.all(testPromises).then(function (values) {\r\n      allTargetResults.data = values;\r\n      return allTargetResults;\r\n    });\r\n  }\r\n\r\n  //recursively fetch the data\r\n  async recursiveRequest(reqUrl, target, options, data) {\r\n    if (reqUrl == \"\"){\r\n      reqUrl = this.url + \"/\" + this.apiEndpoint + target.metric +\r\n      '?from=' + options.range.from.toISOString() + '&to=' + options.range.to.toISOString()\r\n    } else {\r\n      reqUrl = this.url + reqUrl\r\n    }\r\n\r\n    let response = await this.doRequest({\r\n      url: reqUrl,\r\n      method: 'GET'\r\n    });\r\n\r\n    var nextlink = response.data.nextLink; \r\n    var datapoints = this.convertData(response.data);\r\n    data.push(...datapoints);\r\n\r\n    if (typeof nextlink != 'undefined' && nextlink != \"\") {\r\n      // query the next page\r\n      return this.recursiveRequest(nextlink, target, options, data);\r\n    } else {\r\n      return this.transformToTable(\r\n        data,\r\n        0,\r\n        {\r\n          columns: [\r\n            {text: \"time\", type: \"time\"},\r\n            {text: target.metric}\r\n          ],\r\n          values: [\r\n            function(v) { return v[1]; }, \r\n            function(v) { return v[0]; }, \r\n          ] \r\n        },\r\n        target\r\n      );\r\n          \r\n    }\r\n  }\r\n\r\n  // make an request to the server\r\n  async doRequest(options) {\r\n    options.withCredentials = this.withCredentials;\r\n    options.headers = this.headers;\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  // Convert historical SenML data from Data/Aggr API to Grafana datapoints\r\n  convertData(data) {\r\n    \r\n    var datapoints = _.map(data.data, entry => {\r\n      switch(true){\r\n        case entry.hasOwnProperty(\"v\"):\r\n          return [entry[\"v\"], entry[\"t\"] * 1000]; \r\n        case entry.hasOwnProperty(\"vs\"):\r\n          return [entry[\"vs\"], entry[\"t\"] * 1000]; \r\n        case entry.hasOwnProperty(\"vb\"):\r\n          return [(entry[\"vb\"]==true ? 1:0), entry[\"t\"] * 1000]; \r\n      }\r\n      throw \"No value in senml record!\"\r\n    });\r\n    return datapoints;\r\n  }\r\n\r\n  // Remove targets that have unselected metric or source\r\n  filterPlaceholders(options) {\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.metric !== 'select time series';\r\n    });\r\n\r\n    return options;\r\n  }\r\n\r\n  // Query list of metrics from Registry API\r\n  // Required for templating\r\n  queryMetrics(options) {\r\n    var metrics = []\r\n    var parent = this;\r\n    function recursiveMetricReq(page) {\r\n      return parent.backendSrv.datasourceRequest({\r\n        //url: this.url + '/search',\r\n        url: parent.url + '/registry?page='+page,\r\n        method: 'GET',\r\n        //headers: { 'Content-Type': 'application/json' }\r\n      }).then(function (res) {\r\n        var total = res.data.total; // total from data api\r\n        metrics.push(...parent.convertMetrics(res));\r\n        if (total > metrics.length) {\r\n          // query the next page\r\n          return recursiveMetricReq(++page);\r\n        } else {\r\n          return metrics;\r\n        }\r\n\r\n      });\r\n    }\r\n    return recursiveMetricReq(1);\r\n  }\r\n\r\n  // Convert registration from Registry API to the format required by Grafana + some meta information\r\n  convertMetrics(res) {\r\n    var series = res.data.series\r\n    if (!series) {\r\n      // console.error('Could not find serries, falling back to stream');\r\n      series = res.data.streams\r\n    }\r\n    return _.map(series, (d, i) => {\r\n      return {\r\n        text: d.name,\r\n        value: i\r\n      };\r\n    });\r\n  }\r\n\r\n  transformToTable(data, limit, options, target) {\r\n    if (!data) {\r\n      console.error('Could not convert data to Tableformat, data is not valid.');\r\n      return [];\r\n    }\r\n\r\n    if (Array.isArray(data)) {\r\n      if (data.length === 0) {\r\n        console.log('Could not convert data to Tableformat, data is empty.');\r\n        return [];\r\n      }\r\n    }\r\n\r\n    if(limit == 0) {\r\n      limit = data.length;\r\n    }\r\n    limit = Math.min(limit, data.length);\r\n\r\n    let table = {\r\n      columnMap: {},\r\n      columns: [],\r\n      meta: {},\r\n      refId: target.refId,\r\n      rows: [],\r\n      type: \"table\"\r\n    };\r\n\r\n    if(options.hasOwnProperty(\"columns\")) {\r\n      for(let i = 0; i < options.columns.length; i++) {\r\n        table.columns.push(options.columns[i]);\r\n      }\r\n    }\r\n    \r\n    if(options.hasOwnProperty(\"values\")) {\r\n      for(let i = 0; i < limit; i++) {\r\n        let row = [];\r\n        for(let j = 0; j < options.values.length; j++) {\r\n          row.push(options.values[j](data[i]));\r\n        }\r\n        table.rows.push(row);\r\n      }\r\n    }\r\n    return table;\r\n  }\r\n\r\n\r\n}\r\n"]}