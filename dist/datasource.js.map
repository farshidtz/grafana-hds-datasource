{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","apiEndpoint","type","url","name","q","withCredentials","headers","basicAuth","length","datasourceRequest","method","then","response","status","message","title","options","targets","_","filter","target","hide","allTargetResults","data","testPromises","map","metric","recursiveRequest","Promise","all","values","reqUrl","range","from","toISOString","to","doRequest","nextlink","nextLink","datapoints","convertData","push","recursiveReq","transformToTable","columns","text","v","entry","hasOwnProperty","metrics","parent","recursiveMetricReq","page","res","total","convertMetrics","streams","d","i","value","limit","console","error","Array","isArray","log","Math","min","table","columnMap","meta","refId","rows","row","j"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.apiEndpoint = \"data/\";\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration page\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/health',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n      }\n    });\n  }\n\n  // Query data from Data API\n  // Called once per panel (graph)\n  async query(options) {\n    options.targets = _.filter(options.targets, target => target.hide !== true);\n    let allTargetResults = { data: [] };\n\n    let testPromises = options.targets.map(async target => {\n      if(!('metric' in target) || target.metric == 'select datastream') {\n        return {'target': '', 'datapoints' : []};\n      }\n      return await this.recursiveRequest(\"\", target, options, []);\n    });\n    return Promise.all(testPromises).then(function (values) {\n      allTargetResults.data = values;\n      return allTargetResults;\n    });\n  }\n\n  //recursively fetch the data\n  async recursiveRequest(reqUrl, target, options, data) {\n    if (reqUrl == \"\"){\n      reqUrl = this.url + \"/\" + this.apiEndpoint + target.metric +\n      '?from=' + options.range.from.toISOString() + '&to=' + options.range.to.toISOString()\n    } else {\n      reqUrl = this.url + reqUrl\n    }\n\n    let response = await this.doRequest({\n      url: reqUrl,\n      method: 'GET'\n    });\n\n    var nextlink = response.data.nextLink; \n    var datapoints = this.convertData(response.data);\n    data.push(...datapoints);\n\n    if (typeof nextlink != 'undefined' && nextlink != \"\") {\n      // query the next page\n      return recursiveReq(nextlink, target, options, data);\n    } else {\n      return this.transformToTable(\n        data,\n        0,\n        {\n          columns: [\n            {text: \"time\", type: \"time\"},\n            {text: target.metric}\n          ],\n          values: [\n            function(v) { return v[1]; }, \n            function(v) { return v[0]; }, \n          ] \n        },\n        target\n      );\n          \n    }\n  }\n\n  // make an request to the server\n  async doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  // Convert historical SenML data from Data/Aggr API to Grafana datapoints\n  convertData(data) {\n    \n    var datapoints = _.map(data.data, entry => {\n      switch(true){\n        case entry.hasOwnProperty(\"v\"):\n          return [entry[\"v\"], entry[\"t\"] * 1000]; \n        case entry.hasOwnProperty(\"vs\"):\n          return [entry[\"vs\"], entry[\"t\"] * 1000]; \n        case entry.hasOwnProperty(\"vb\"):\n          return [(entry[\"vb\"]==true ? 1:0), entry[\"t\"] * 1000]; \n      }\n      throw \"No value in senml record!\"\n    });\n    return datapoints;\n  }\n\n  // Remove targets that have unselected metric or source\n  filterPlaceholders(options) {\n    options.targets = _.filter(options.targets, target => {\n      return target.metric !== 'select datastream';\n    });\n\n    return options;\n  }\n\n  // Query list of metrics from Registry API\n  // Required for templating\n  queryMetrics(options) {\n    var metrics = []\n    var parent = this;\n    function recursiveMetricReq(page) {\n      return parent.backendSrv.datasourceRequest({\n        //url: this.url + '/search',\n        url: parent.url + '/registry?page='+page,\n        method: 'GET',\n        //headers: { 'Content-Type': 'application/json' }\n      }).then(function (res) {\n        var total = res.data.total; // total from data api\n        metrics.push(...parent.convertMetrics(res));\n        if (total > metrics.length) {\n          // query the next page\n          return recursiveMetricReq(++page);\n        } else {\n          return metrics;\n        }\n\n      });\n    }\n    return recursiveMetricReq(1);\n  }\n\n  // Convert registration from Registry API to the format required by Grafana + some meta information\n  convertMetrics(res) {\n    return _.map(res.data.streams, (d, i) => {\n      return {\n        text: d.name,\n        value: i\n      };\n    });\n  }\n\n  transformToTable(data, limit, options, target) {\n    if (!data) {\n      console.error('Could not convert data to Tableformat, data is not valid.');\n      return [];\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length === 0) {\n        console.log('Could not convert data to Tableformat, data is empty.');\n        return [];\n      }\n    }\n\n    if(limit == 0) {\n      limit = data.length;\n    }\n    limit = Math.min(limit, data.length);\n\n    let table = {\n      columnMap: {},\n      columns: [],\n      meta: {},\n      refId: target.refId,\n      rows: [],\n      type: \"table\"\n    };\n\n    if(options.hasOwnProperty(\"columns\")) {\n      for(let i = 0; i < options.columns.length; i++) {\n        table.columns.push(options.columns[i]);\n      }\n    }\n    \n    if(options.hasOwnProperty(\"values\")) {\n      for(let i = 0; i < limit; i++) {\n        let row = [];\n        for(let j = 0; j < options.values.length; j++) {\n          row.push(options.values[j](data[i]));\n        }\n        table.rows.push(row);\n      }\n    }\n    return table;\n  }\n\n\n}\n"]}